"use server"

import TelegramBot, {ChatId} from "node-telegram-bot-api";
import {z} from "zod";

const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

if (!token || !chatId) {
    throw Error("Missed TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID");
}

const bot = new TelegramBot(token, {polling: true});

const FormData = z.object({
    email: z.string({
        invalid_type_error: "–î–æ–¥–∞–π—Ç–µ email"
    }).email({
        message: "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email"
    }).max(150, "–í–≤–µ–¥—ñ—Ç—å –µ–ª –ø–æ—à—Ç—É —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –º–µ–Ω—à–µ –Ω—ñ–∂ 150 —Å–∏–º–≤–æ–ª—ñ–≤").min(1, "–í–≤–µ–¥—ñ—Ç—å email"),
    name: z.string({
        invalid_type_error: "–î–æ–¥–∞–π—Ç–µ —ñ–º'—è"
    }).max(99, "–í–∞—à–µ —ñ–º'—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –∫–æ—Ä–æ—Ç—à–∏–º –Ω—ñ–∂ 100 —Å–∏–º–≤–æ–ª—ñ–≤").min(1, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è"),
    message: z.string({
        invalid_type_error: "–î–æ–¥–∞–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
    }).max(480, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: 480 —Å–∏–º–≤–æ–ª—ñ–≤").min(1, "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
});

export type State = {
    status?: number,
    errors?: {
        email?: string[],
        name?: string[],
        message?: string[],
        manual?: string[],
    };
    message?: string | null;
};

export async function sendMessageToTelegram(state: State | undefined, formData: FormData): Promise<State | undefined> {
    let validateInput = FormData.safeParse({
        name: formData.get("name"),
        email: formData.get("email"),
        message: formData.get("message"),
    });

    if (!validateInput.success) {
        return {
            status: 400,
            errors: validateInput.error.flatten().fieldErrors,
            message: validateInput.error?.errors.map(item => item.message).join(". "),
        };
    }

    let {name, email, message} = validateInput.data;

    try {
        message = message.split(".").join("\\.")
        email = email.split(".").join("\\.")
        name = name.split(".").join("\\.")
        message = message.split("!").join("\\!")
        email = email.split("!").join("\\!")
        name = name.split("!").join("\\!")
        message = message.split("-").join("\\-")
        email = email.split("-").join("\\-")
        name = name.split("-").join("\\-")

        await bot.sendMessage(chatId as ChatId, `üÜï *–£–≤–∞–≥–∞, –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${name}\\!* \n\n||${message}||\n\n*üì¨ Email:* ${email}`, {
            parse_mode: "MarkdownV2"
        });

        return {
            status: 200,
            message: "Ok"
        };
    } catch (e) {
        if (typeof e === "string") {
            return {
                status: 500,
                errors: {
                    manual: [e.toUpperCase()]
                },
                message: `–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. ${e.toUpperCase()}`
            };
        } else if (e instanceof Error) {
            return {
                status: 500,
                errors: {
                    manual: [e.message]
                },
                message: `–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. ${e.message}`
            };
        }
    }
}
